from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üíï–ë–∞–ª–µ", callback_data='bale')],
        [InlineKeyboardButton("üòé–°–∞–≤–æ–ª–Ω–æ–º–∞ –Ω–∞—à—Ä –º–µ–∫—É–Ω–∞–º", callback_data='publish')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–∞–ª–æ–º –±–∞ —à—É–º–æ! –°–∞–≤–æ–ª–Ω–æ–º–∞ –º–∞“≥“õ—É–ª —à—É–¥?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == 'bale':
        user_data[user_id] = {}  # –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ask_question(query, context, "üî∂–ù–æ–º :")
    elif query.data == 'publish':
        await query.edit_message_text("–°–∞–≤–æ–ª–Ω–æ–º–∞–∏ —Ö—É–¥—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥!")

# –í–æ–ø—Ä–æ—Å—ã –≤ –Ω—É–∂–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
questions = [
    "üî∂–ù–æ–º :",
    "üî∂–°–∏–Ω—É —Å–æ–ª :",
    "üî∂–ë–∞–ª–∞–Ω–¥–∏–∏ “õ–∞–¥:",
    "üî∂–í–∞–∑–Ω :",
    "üî∂–ú–∏–ª–ª–∞—Ç :",
    "üî∂–î–∞–≤–ª–∞—Ç/–®–∞“≥-–¥:",
    "üî∂–®–∞“≥—Ä/–Ω–æ“≥–∏—è :",
    "üî∂“≤–∞–º—Å–∞—Ä :",
    "üî∂–§–∞—Ä–∑–∞–Ω–¥ :",
    "üî∂–ú–∞—à“ì—É–ª–∏—è—Ç :",
    "üî∂–ú–∞—ä–ª—É–º–æ—Ç :",
    "üìÑ–ö–∞–º–µ –¥–∞—Ä –±–æ—Ä–∞–∏ —Ö—É–¥ :",
    "üßïüèªüßîüèª“≤–∞–º—Å–∞—Ä —á–∏ –≥—É–Ω–∞ –±–æ—à–∞–¥?",
    "üìû–¢elegram :",
    "üìûWhatsApp :"
]

# –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
async def ask_question(query, context, question):
    await query.edit_message_text(question)
    context.user_data['current_question'] = question

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    answer = update.message.text

    if user_id not in user_data:
        await update.message.reply_text("–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –±–æ —Ñ–∞—Ä–º–æ–Ω–∏ /start –æ“ì–æ–∑ –∫—É–Ω–µ–¥.")
        return

    current_question = context.user_data.get('current_question')
    if current_question:
        user_data[user_id][current_question] = answer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        current_index = questions.index(current_question)
        if current_index + 1 < len(questions):
            next_question = questions[current_index + 1]
            await update.message.reply_text(next_question)
            context.user_data['current_question'] = next_question
        else:
            # –ö–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            summary = "üìã **–°–∞–≤–æ–ª–Ω–æ–º–∞ –ø—É—Ä—Ä–∞ —à—É–¥:**\n\n"
            for q in questions:
                summary += f"{q} {user_data[user_id].get(q, '‚ùå')}\n"
            await update.message.reply_text(summary, parse_mode='Markdown')
            del user_data[user_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token('6009441598:AAGqq5NI2uiMpmdJRQmmFrNu0YosHfSGnKw').build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()

if __name__ == '__main__':
    main()